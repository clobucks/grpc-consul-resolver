// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SleepDuration struct {
	Sec                  int32    `protobuf:"varint,1,opt,name=sec,proto3" json:"sec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SleepDuration) Reset()         { *m = SleepDuration{} }
func (m *SleepDuration) String() string { return proto.CompactTextString(m) }
func (*SleepDuration) ProtoMessage()    {}
func (*SleepDuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *SleepDuration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SleepDuration.Unmarshal(m, b)
}
func (m *SleepDuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SleepDuration.Marshal(b, m, deterministic)
}
func (m *SleepDuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SleepDuration.Merge(m, src)
}
func (m *SleepDuration) XXX_Size() int {
	return xxx_messageInfo_SleepDuration.Size(m)
}
func (m *SleepDuration) XXX_DiscardUnknown() {
	xxx_messageInfo_SleepDuration.DiscardUnknown(m)
}

var xxx_messageInfo_SleepDuration proto.InternalMessageInfo

func (m *SleepDuration) GetSec() int32 {
	if m != nil {
		return m.Sec
	}
	return 0
}

func init() {
	proto.RegisterType((*SleepDuration)(nil), "api.SleepDuration")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x94, 0xe2, 0x4e, 0xcd, 0x2d, 0x28,
	0xa9, 0x84, 0x88, 0x28, 0x29, 0x72, 0xf1, 0x06, 0xe7, 0xa4, 0xa6, 0x16, 0xb8, 0x94, 0x16, 0x25,
	0x96, 0x64, 0xe6, 0xe7, 0x09, 0x09, 0x70, 0x31, 0x17, 0xa7, 0x26, 0x4b, 0x30, 0x2a, 0x30, 0x6a,
	0xb0, 0x06, 0x81, 0x98, 0x46, 0x76, 0x5c, 0xec, 0x60, 0x25, 0xa9, 0x45, 0x42, 0xc6, 0x5c, 0xac,
	0x60, 0xa6, 0x90, 0x90, 0x1e, 0xc8, 0x50, 0x14, 0x9d, 0x52, 0x62, 0x7a, 0xe9, 0xf9, 0xf9, 0xe9,
	0x39, 0xa9, 0x10, 0x93, 0x93, 0x4a, 0xd3, 0xf4, 0x5c, 0x41, 0x16, 0x39, 0xb1, 0x46, 0x81, 0xac,
	0x4d, 0x62, 0x03, 0x0b, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x6c, 0x51, 0x4d, 0x8f,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SleeperClient is the client API for Sleeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SleeperClient interface {
	Sleep(ctx context.Context, in *SleepDuration, opts ...grpc.CallOption) (*empty.Empty, error)
}

type sleeperClient struct {
	cc *grpc.ClientConn
}

func NewSleeperClient(cc *grpc.ClientConn) SleeperClient {
	return &sleeperClient{cc}
}

func (c *sleeperClient) Sleep(ctx context.Context, in *SleepDuration, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.Sleeper/Sleep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SleeperServer is the server API for Sleeper service.
type SleeperServer interface {
	Sleep(context.Context, *SleepDuration) (*empty.Empty, error)
}

// UnimplementedSleeperServer can be embedded to have forward compatible implementations.
type UnimplementedSleeperServer struct {
}

func (*UnimplementedSleeperServer) Sleep(ctx context.Context, req *SleepDuration) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sleep not implemented")
}

func RegisterSleeperServer(s *grpc.Server, srv SleeperServer) {
	s.RegisterService(&_Sleeper_serviceDesc, srv)
}

func _Sleeper_Sleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SleepDuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SleeperServer).Sleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Sleeper/Sleep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SleeperServer).Sleep(ctx, req.(*SleepDuration))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sleeper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Sleeper",
	HandlerType: (*SleeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sleep",
			Handler:    _Sleeper_Sleep_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
